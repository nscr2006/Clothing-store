{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyADpK4oiNQVxRBQW3BKoV633veamxn9bqY\",\n  authDomain: \"crown-db-a6812.firebaseapp.com\",\n  databaseURL: \"https://crown-db-a6812.firebaseio.com\",\n  projectId: \"crown-db-a6812\",\n  storageBucket: \"crown-db-a6812.appspot.com\",\n  messagingSenderId: \"5604835960\",\n  appId: \"1:5604835960:web:ac40ff1057684a1460e38d\",\n  measurementId: \"G-L3L97LRDXE\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/sharathchandrareddy/Desktop/crwn-clothing/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","initializeApp","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config= {\n    apiKey: \"AIzaSyADpK4oiNQVxRBQW3BKoV633veamxn9bqY\",\n    authDomain: \"crown-db-a6812.firebaseapp.com\",\n    databaseURL: \"https://crown-db-a6812.firebaseio.com\",\n    projectId: \"crown-db-a6812\",\n    storageBucket: \"crown-db-a6812.appspot.com\",\n    messagingSenderId: \"5604835960\",\n    appId: \"1:5604835960:web:ac40ff1057684a1460e38d\",\n    measurementId: \"G-L3L97LRDXE\"\n  }\n\n  export  const createUserProfileDocument= async (userAuth,additionalData)=>{\n      if(!userAuth) return;\n      const userRef = firestore.doc(`users/${userAuth.uid}`);\n      const snapShot= await userRef.get();\n       if(!snapShot.exists){\n           const { displayName,email}=userAuth;\n           const createdAt=new Date();\n\n           try{\n               await userRef.set({\n                   displayName,\n                   email,\n                   createdAt,\n                   ...additionalData\n               })\n           }catch(error){\n               console.log('error creating user',error.message);\n           }\n       }\n       return userRef;\n\n  }\n  firebase.initializeApp(config);\n\n  export const addCollectionAndDocuments=async (collectionKey,objectsToAdd)=>{\n      const collectionRef=firestore.collection(collectionKey);\n      console.log(collectionRef);\n\n      const batch=firestore.batch();\n      objectsToAdd.forEach(obj=>{\n          const newDocRef=collectionRef.doc();\n        batch.set(newDocRef,obj);\n      })\n      return await batch.commit()\n  }\n\n  export const convertCollectionsSnapshotToMap=(collections)=>{\n      const transformedCollection=collections.docs.map(doc=>{\n          const {title,items} = doc.data();\n \n          return{\n              routeName:encodeURI(title.toLowerCase()),\n              id:doc.id,\n              title,\n              items\n          }\n              })\n              return transformedCollection.reduce((accumulator,collection)=>{\n                  accumulator[collection.title.toLowerCase()]=collection;\n                  return accumulator;\n\n              },{})\n             \n  }\n\n  export const getCurrentUser = () => {\n    return new Promise((resolve, reject) => {\n      const unsubscribe = auth.onAuthStateChanged(userAuth => {\n        unsubscribe();\n        resolve(userAuth);\n      }, reject);\n    });\n  };\n  \n\n  export  const auth=firebase.auth();\n  export  const  firestore=firebase.firestore();\n  const provider=new firebase.auth.GoogleAuthProvider();\n  provider.setCustomParameters({prompt:'select_account'});\n\n  export const signInWithGoogle=()=>auth.signInWithPopup(provider);\n\n  export default firebase;\n  \n"]},"metadata":{},"sourceType":"module"}